         A Description of the Resources and Expected Deliverables of Assignment A5
         =========================================================================


A. Resources
------------

This directory contains the following :

 1. This file (A5-README).

 2. A subdirectory called A5-reference-implementations. It contains the following files
    
    - A5-sclp. This is the reference implementation for assignment A5.
      You submission should match the behaviour of this implementation (barring perhaps 
      the -help option).

      If you have any questions about the specifications, create suitable examples and 
      run this implementation to discover the finer points.

    - Reference implementations L1-sclp, L2-sclp, L3-sclp, L4-sclp, and L5-sclp.
      These are reference implementations of the full compiler for language levels 1, 2, 3,
      4, and 5. You can observe the AST, TAC, RTL, ASM for your input programs by giving
      appropriate command line switches.

      Note that A5-sclp is same as "L5-sclp -sa-rtl" (in fact, that is how it has been 
      implemented).

 3. A subdirectory called A5-example-programs containing some valid programs for level 5 of 
    the language.


B. Expected Deliverables
-------------------------

As explained in the class and the sclp web page, this assignment requires you to generate RTL for
Level 5 of the language. A description of the levels can be found on the sclp web page.

You need to submit a tarred gzipped version of your directory (file name must be <group_id>.tar.gz). 
On untarring, it must produce the director `group_id' (e.g. `group1', `group19'). The directory
must contain a `Makefile' that produces an executable called `sclp' (and not `A5-sclp', `L1-sclp',
`L2-sclp', nor L3-sclp). The Makefile must also have a target `clean' such that the command `make 
clean' deletes all generated files in the same directory (including those generated by compiling 
sclp, those generated by sclp on any input program and the *.log files below). The output files
produced by executing sclp should match the exact input file name including its full path (if any).
Any deviation from this will be treated as non-submission. 

You are required to use C++ code in your implementation.

Your submission will be evaluated on the following factors:

 1. A set of test cases. 

    Some of these will be valid programs whereas some will be invalid programs. The commands used 
    will be

    $ ./sclp valid_test.c

    This should produce no output and should finish silently and exit with return value 0. Thus the 
    sequence of commands
    
    $ ./sclp valid_test.c
    $ echo $?

    should print the number 0.

    In other words, the program valid_test.c should be accepted and properly parsed by your implementation. 
    Please do not print any thing in the output, not even something to the effect "Program Accepted" 
    or "Hurray!!" :)

    $ ./sclp invalid_test.c

    For such a program, the command must print an error message or stderr (or cerr) and exit with a non-zero 
    return value. In other words, the program invalid_test.c should be rejected by your implementation. The 
    output redirection to a file with the command

    $ ./sclp invalid_test.c >| out.log
 
    should still print the error message on the screen. Command `echo $?' after it should print a 
    non-zero number. Your program must exit gracefully --- a segmentation fault is not acceptable even 
    on invalid inputs.

    The only way to silence the screen output should be to use the command

    % ./sclp invalid_test.c 2>| err.log

    Again, the command `echo $?' after it should print a non-zero number.

    The text of the error message that goes in err.log does not matter and it need not match that of 
    the reference implementation. If you print error messages on stdout (or cout), it is wrong.
    Similarly, if you print them on stderr (or cerr) but do not exit with a non-zero value, that too
    is wrong. Negative marks will be awarded for not exiting with non-zero values on errors.

    The golden rule is that when you are in doubt, post on moodle discussion forum, the following 
    things: the name of the test case (or the smallest version of your program that exhibits the 
    behavior), the response of A5-sclp and the response of L5-sclp.

 2. The following options will be checked: -tokens, -ast, -tac, -rtl, -sa-scan, -sa-parse, -sa-ast, and
    -sa-tac. The options and the input file name may appear in any order.
    
    All outputs will be matched using the command `diff -Bw' which should produce zero output. In some 
    cases, the intervening new lines are not ignored by -Bw so please do not print any extra new lines that
    do not exist in the output generated by the reference implementation.

    Note that the token codes do not appear in the tokens file. Token names appear in the tokens file; 
    token codes are the integer values returned by the yylex function.


 3. Absence of shift-reduce or reduce-reduce conflicts in the parser.

    Use the command `yacc -dv' in your Makefile to produce the y.tab.h and y.output files (do not
    rename them). The command

    $ make

    should not report any shift-reduce or reduce-reduce conflicts. Similarly no conflicts should 
    appear in the y.output file.
